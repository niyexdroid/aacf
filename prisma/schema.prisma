// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Event {
  id          String         @id @default(cuid())
  title       String
  description String
  date        DateTime
  time        String
  location    String
  image       String?
  images      GalleryImage[]
  videos      Video[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([date])
  @@index([createdAt])
}

model GalleryImage {
  id        String   @id @default(cuid())
  url       String
  title     String
  caption   String?
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([createdAt])
}

model Video {
  id          String   @id @default(cuid())
  url         String
  title       String
  description String?
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([eventId])
  @@index([createdAt])
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  excerpt   String
  image     String?
  category  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([createdAt])
}

model Donor {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  amount           Float?
  message          String?
  paymentReference String?
  paymentStatus    String?  @default("success")
  paymentMethod    String?  @default("paystack")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([email])
  @@index([createdAt])
  @@index([paymentStatus])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  status    String   @default("new") // new, read, resolved
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([email])
}
